buildscript {
	repositories {
		maven {
			name "Fabric Repository"
			url 'https://maven.fabricmc.net'
		}
	}
	dependencies {
		classpath "cuchaz:enigma-cli:0.22.0"
		classpath "net.fabricmc:stitch:${project.stitch_version}"
		classpath "commons-io:commons-io:2.6"
		classpath 'de.undercouch:gradle-download-task:4.0.4'
		classpath 'net.fabricmc:tiny-remapper:0.3.1.72'
		classpath 'net.fabricmc:mappingpoet:0.1.0+build.2'
	}
}

plugins {
	id 'de.undercouch.download' version '4.0.4'
	id 'base'
	id 'maven-publish'
	id 'java' // for jd gen
	id "com.jfrog.bintray" version "1.8.5"
}

import java.time.ZoneId
import java.time.LocalDate
import java.time.format.DateTimeFormatter

def minecraft_version = "a1.0.4"

def ENV = System.getenv()

def now = LocalDate.now(ZoneId.of("UTC")).format(DateTimeFormatter.ISO_ORDINAL_DATE).replace('-', 'd').substring(2)
def build_version = now
def ordered_version = ".5"
println("Current version: build" + ordered_version)

def linenVersion = "${minecraft_version}+build${ordered_version}"

repositories {
	mavenCentral()
	maven {
		name "Fabric Repository"
		url 'https://maven.fabricmc.net'
	}
	maven {
		name "Mojang"
		url 'https://libraries.minecraft.net/'
	}
}

configurations {
	enigmaRuntime {
		resolutionStrategy {
			cacheDynamicVersionsFor 0, "seconds"
			cacheChangingModulesFor 0, "seconds"
		}
	}
	javadocClasspath
	decompileClasspath
}

dependencies {
	enigmaRuntime "cuchaz:enigma-swing:${project.enigma_version}"
	enigmaRuntime "net.fabricmc:stitch:${project.stitch_version}"
	javadocClasspath "net.fabricmc:fabric-loader:0.8.2+build.194"
	javadocClasspath "com.google.code.findbugs:jsr305:3.0.2"
	decompileClasspath "org.benf:cfr:0.150"
}

def setupGroup = "jar setup"
def linenGroup = "linen"
def buildMappingGroup = "mapping build"
def mapJarGroup = "jar mapping"
def mappingsDir = file("mappings")
def cacheFilesMinecraft = file(".gradle/minecraft")
def tempDir = file(".gradle/temp")
def mergedFile = file("${minecraft_version}-merged.jar")
def intermediaryJar = file("${minecraft_version}-intermediary.jar")
def namedJar = file("${minecraft_version}-named.jar")
def versionFile = new File(cacheFilesMinecraft, "${minecraft_version}.json")
def clientJar = new File(cacheFilesMinecraft, "${minecraft_version}-client.jar")
def libraries = new File(cacheFilesMinecraft, "libraries")
def libs = new File("build/libs/")


import com.google.common.hash.Hashing
import cuchaz.enigma.command.CheckMappingsCommand
import cuchaz.enigma.command.ComposeMappingsCommand
import cuchaz.enigma.command.ConvertMappingsCommand
import cuchaz.enigma.command.MapSpecializedMethodsCommand
import groovy.io.FileType
import groovy.json.JsonSlurper
import net.fabricmc.stitch.commands.CommandMergeTiny
import net.fabricmc.stitch.commands.CommandProposeFieldNames
import net.fabricmc.stitch.commands.CommandReorderTiny
import net.fabricmc.stitch.commands.CommandRewriteIntermediary
import net.fabricmc.stitch.commands.tinyv2.CommandProposeV2FieldNames
import net.fabricmc.stitch.commands.tinyv2.CommandMergeTinyV2
import net.fabricmc.stitch.commands.tinyv2.CommandReorderTinyV2
import net.fabricmc.stitch.merge.JarMerger
import net.fabricmc.tinyremapper.OutputConsumerPath
import net.fabricmc.tinyremapper.TinyRemapper
import net.fabricmc.tinyremapper.TinyUtils
import org.apache.commons.io.FileUtils

import java.nio.charset.StandardCharsets
import java.util.zip.GZIPOutputStream

boolean validateChecksum(File file, String checksum) {
	if (file != null) {
		def hash = com.google.common.io.Files.asByteSource(file).hash(Hashing.sha1())
		def builder = new StringBuilder()
		hash.asBytes().each {
			builder.append(Integer.toString((it & 0xFF) + 0x100, 16).substring(1))
		}
		return builder.toString().equals(checksum)
	}
	return false
}

task downloadVersionsManifest {
	group = setupGroup

	inputs.property "currenttime", new Date()
	def manifestFile = new File(cacheFilesMinecraft, "version_manifest.json")
	outputs.file(manifestFile)
	doLast {
		logger.lifecycle(":downloading minecraft versions manifest")
		FileUtils.copyURLToFile(new URL("https://launchermeta.mojang.com/mc/game/version_manifest.json"), manifestFile)
	}
}

def getManifestVersion(File manifestFile, String minecraft_version) {
	def manifest = manifestFile.exists() ? new JsonSlurper().parseText(FileUtils.readFileToString(manifestFile)) : null
	return manifest != null ? manifest.versions.stream().filter({
		it.id.equals(minecraft_version)
	}).findFirst() : java.util.Optional.empty()
}

task downloadWantedVersionManifest(dependsOn: downloadVersionsManifest) {
	group = setupGroup
	def manifestFile = downloadVersionsManifest.outputs.files.singleFile
	def manifestVersion = getManifestVersion(manifestFile, minecraft_version)

	//have to grab the release time as there's a current timestamp on each element?!
	inputs.property "releaseTime", manifestVersion.isPresent() ? manifestVersion.get().releaseTime : -1

	outputs.file versionFile

	doLast {
		manifestVersion = getManifestVersion(manifestFile, minecraft_version)
		//nb need to re-read here in case it didn't exist before
		if (manifestVersion.isPresent() || versionFile.exists()) {

			if (manifestVersion.isPresent()) {
				FileUtils.copyURLToFile(new URL(manifestVersion.get().url), versionFile)
			}
		} else {
			throw new RuntimeException("No version data for Minecraft version ${minecraft_version}")
		}
	}

}

task downloadMcJars(dependsOn: downloadWantedVersionManifest) {
	group = setupGroup
	inputs.files versionFile

	outputs.files(clientJar)

	outputs.upToDateWhen {
		def version = new JsonSlurper().parseText(FileUtils.readFileToString(versionFile))
		return clientJar.exists() && validateChecksum(clientJar, version.downloads.client.sha1)
	}

	doLast {
		if (!versionFile.exists()) {
			throw new RuntimeException("Can't download the jars without the ${versionFile.name} file!")
		}

		//reload in case it changed
		def version = new JsonSlurper().parseText(FileUtils.readFileToString(versionFile))

		logger.lifecycle(":downloading minecraft jars")

		download {
			src new URL(version.downloads.client.url)
			dest clientJar
			overwrite false
		}
	}
}

task downloadIntermediary(type: Download) {
	group = buildMappingGroup
	def url = "https://raw.githubusercontent.com/PolyesterMC/alpha-intermediary/45cc687bbf77131fcc71faa8e75b84f775b7f619/mappings/a1.0.4.tiny"

	// school wifi is a treat, change urls when doing actual mappings.
	def cursed_url = "https://drive.google.com/uc?export=download&id=1Bmjw9q-5r0M58V-UPRqVYcFQ6ISWkn85"
	src com.google.common.net.UrlEscapers.urlFragmentEscaper().escape(cursed_url)
	dest new File(cacheFilesMinecraft, "${minecraft_version}-intermediary.tiny")
}

task downloadIntermediaryV2(type: Download) {
	group = buildMappingGroup
	def url = "https://github.com/PolyesterMC/alpha-intermediary/blob/main/intermediary-a1.0.4-v2.jar?raw=true"
	src com.google.common.net.UrlEscapers.urlFragmentEscaper().escape(url)
	dest new File(cacheFilesMinecraft, "${minecraft_version}-intermediary-v2.jar")
}

task extractIntermediaryV2(dependsOn: downloadIntermediaryV2, type: Copy) {
	def output = new File(cacheFilesMinecraft, "${minecraft_version}-intermediary-v2.tiny")
	from({ zipTree(downloadIntermediaryV2.dest) }) {
		include 'mappings/mappings.tiny'
		rename 'mappings.tiny', "../${output.name}"
	}
	into output.parentFile
}

task mergeJars(dependsOn: downloadMcJars) {
	group = setupGroup
	inputs.files downloadMcJars.outputs.files.files
	outputs.file(mergedFile)

	doLast {
		logger.lifecycle(":merging jars")
		def client = inputs.files.files.find { it.name.endsWith("-client.jar") }
		def merged = mergedFile

		if (merged.exists()) {
			return
		}

		def jarMerger = new JarMerger(client, client, merged)
		jarMerger.merge()
		jarMerger.close()
	}

}

task downloadMcLibs(dependsOn: downloadWantedVersionManifest) {
	group = setupGroup
	inputs.files versionFile

	outputs.dir(libraries)

	outputs.upToDateWhen { false }

	doLast {
		if (!versionFile.exists()) {
			throw new RuntimeException("Can't download the jars without the ${versionFile.name} file!")
		}

		def version = new JsonSlurper().parseText(FileUtils.readFileToString(versionFile, StandardCharsets.UTF_8))

		logger.lifecycle(":downloading minecraft libraries")

		if (!libraries.exists()) {
			libraries.mkdirs()
		}

		version.libraries.each {
			if (it.downloads.artifact != null) {
				def downloadUrl = it.downloads.artifact.url

				download {
					src downloadUrl
					dest new File(libraries, downloadUrl.substring(downloadUrl.lastIndexOf("/") + 1))
					overwrite false
				}

				project.dependencies.add("decompileClasspath", it.name)
			}
		}
	}
}

task invertIntermediary(dependsOn: downloadIntermediary, type: FileOutput) {
	group = buildMappingGroup
	def v1Input = downloadIntermediary.dest

	output = new File(cacheFilesMinecraft, "${minecraft_version}-intermediary-inverted.tiny")
	outputs.file(output)

	outputs.upToDateWhen { false }

	doLast {
		logger.lifecycle(":building inverted intermediary")

		String[] v1Args = [
				v1Input.getAbsolutePath(),
				output.getAbsolutePath(),
				"intermediary", "official"
		]

		new CommandReorderTiny().run(v1Args)
	}
}

task invertIntermediaryv2(dependsOn: extractIntermediaryV2, type: FileOutput) {
	group = buildMappingGroup
	def v2Input = new File(cacheFilesMinecraft, "${minecraft_version}-intermediary-v2.tiny")

	output = new File(cacheFilesMinecraft, "${minecraft_version}-intermediary-inverted-v2.tiny")
	outputs.file(output)

	outputs.upToDateWhen { false }

	doLast {
		logger.lifecycle(":building inverted intermediary v2")

		String[] v2Args = [
				v2Input.getAbsolutePath(),
				output.getAbsolutePath(),
				"intermediary", "official"
		]

		new CommandReorderTinyV2().run(v2Args)
	}
}

task patchIntermediary(dependsOn: [mergeJars, downloadIntermediary]) {
	group = buildMappingGroup
	def intermediaryTinyInput = downloadIntermediary.outputs.files.singleFile

	def outputFile = new File(cacheFilesMinecraft, "${minecraft_version}-intermediary-full.tiny")
	outputs.file(outputFile)

	outputs.upToDateWhen { false }

	doLast {
		logger.lifecycle(":patching intermediary")
		String[] args = [
				mergedFile.getAbsolutePath(),
				intermediaryTinyInput.getAbsolutePath(),
				outputFile.getAbsolutePath(),
				"--writeAll"
		]

		new CommandRewriteIntermediary().run(args)
	}
}

task mapIntermediaryJar(dependsOn: [downloadMcLibs, downloadIntermediary, mergeJars]) {
	group = mapJarGroup
	inputs.files downloadMcLibs.outputs.files.files
	outputs.file(intermediaryJar)

	//Force the task to always run
	outputs.upToDateWhen { false }

	doLast {
		logger.lifecycle(":mapping minecraft to intermediary")
		def tinyInput = downloadIntermediary.dest
		mapJar(intermediaryJar, mergedFile, tinyInput, libraries, "official", "intermediary")
	}
}

task setupLinen(dependsOn: mapIntermediaryJar) {
	group = linenGroup
}

task linen(dependsOn: setupLinen) {
	group = linenGroup
	doLast {
		ant.setLifecycleLogLevel "WARN"
		ant.java(
				classname: 'cuchaz.enigma.gui.Main',
				classpath: configurations.enigmaRuntime.asPath,
				fork: true,
				spawn: true
		) {
			jvmarg(value: "-Xmx2048m")
			arg(value: '-jar')
			arg(value: intermediaryJar.getAbsolutePath())
			arg(value: '-mappings')
			arg(value: mappingsDir.getAbsolutePath())
			arg(value: '-profile')
			arg(value: 'enigma_profile.json')
		}
	}
}

task checkMappings {
	group = buildMappingGroup
	inputs.dir mappingsDir
	doLast {
		logger.lifecycle(":checking mappings")

		String[] args = [
				mergedFile.getAbsolutePath(),
				mappingsDir.getAbsolutePath()
		]

		new CheckMappingsCommand().run(args)
	}
}

task buildLinenTiny(dependsOn: mapIntermediaryJar, type: WithV2FileOutput) {
	group = buildMappingGroup
	inputs.dir mappingsDir
	if (!libs.exists()) {
		libs.mkdirs()
	}

	v1Output = new File(tempDir, "linen-mappings.tiny")
	v2Output = new File(tempDir, "linen-mappings-v2.tiny")

	outputs.upToDateWhen { false }

	doLast {
		logger.lifecycle(":generating tiny mappings")

		new MapSpecializedMethodsCommand().run(
				intermediaryJar.getAbsolutePath(),
				"enigma",
				mappingsDir.getAbsolutePath(),
				"tinyv2:intermediary:named",
				v2Output.getAbsolutePath()
		)

		new ConvertMappingsCommand().run(
				"tinyv2",
				v2Output.getAbsolutePath(),
				"tiny:intermediary:named",
				v1Output.getAbsolutePath())
	}
}

task mergeTiny(dependsOn: ["buildLinenTiny", "invertIntermediary"], type: FileOutput) {
	group = buildMappingGroup
	def linenTinyInput = buildLinenTiny.v1Output
	def intermediaryTinyInput = invertIntermediary.output

	def unorderedResultMappings = new File(tempDir, "mappings-unordered.tiny")
	output = new File(tempDir, "mappings.tiny")
	outputs.file(output)

	outputs.upToDateWhen { false }

	doLast {
		logger.lifecycle(":merging linen and intermediary")
		String[] args = [
				intermediaryTinyInput.getAbsolutePath(),
				linenTinyInput.getAbsolutePath(),
				unorderedResultMappings.getAbsolutePath(),
				"intermediary",
				"official"
		]

		new CommandMergeTiny().run(args)

		logger.lifecycle(":reordering merged intermediary")
		String[] args2 = [
				unorderedResultMappings.getAbsolutePath(),
				output.getAbsolutePath(),
				"official", "intermediary", "named"
		]

		new CommandReorderTiny().run(args2)
	}
}

task tinyJar(type: Jar, dependsOn: mergeTiny) {
	group = buildMappingGroup
	outputs.upToDateWhen { false }
	archiveFileName = "linen-${linenVersion}.jar"
	destinationDirectory.set(file("build/libs"))
	classifier = ""
	from(mergeTiny.output) {
		rename { "mappings/mappings.tiny" }
	}
}

task compressTiny(dependsOn: [tinyJar, mergeTiny], type: FileOutput) {
	group = buildMappingGroup
	def outputFile = new File(libs, "linen-tiny-${linenVersion}.gz")
	outputs.file(outputFile)
	output = outputFile

	def inputFile = mergeTiny.output

	outputs.upToDateWhen { false }

	doLast {
		logger.lifecycle(":compressing tiny mappings")

		def buffer = new byte[1024]
		def fileOutputStream = new FileOutputStream(outputFile)
		def outputStream = new GZIPOutputStream(fileOutputStream)
		def fileInputStream = new FileInputStream(inputFile)

		def length
		while ((length = fileInputStream.read(buffer)) > 0) {
			outputStream.write(buffer, 0, length)
		}

		fileInputStream.close()
		outputStream.finish()
		outputStream.close()
	}
}

clean.doFirst {
	delete tempDir, cacheFilesMinecraft
}

tasks.build.dependsOn "compressTiny","tinyJar","v2UnmergedLinenJar", "v2MergedLinenJar"

task exportMappingsOfficial(dependsOn: downloadIntermediary) {
	def composeInput = downloadIntermediary.dest

	doLast {
		logger.lifecycle(":exporting mappings")
		String[] args = [
				"tiny",
				composeInput.getAbsolutePath(),
				"enigma",
				file("mappings/").getAbsolutePath(),
				"enigma",
				file("mappings_official/").getAbsolutePath(),
				"right"
		]

		new ComposeMappingsCommand().run(args)
	}
}

task importMappingsOfficial(dependsOn: invertIntermediary) {
	def composeInput = invertIntermediary.output

	doLast {
		logger.lifecycle(":importing mappings")
		String[] args = [
				"tiny",
				composeInput.getAbsolutePath(),
				"enigma",
				file("mappings_official/").getAbsolutePath(),
				"enigma",
				file("mappings/").getAbsolutePath(),
				"right"
		]

		new ComposeMappingsCommand().run(args)
	}
}

task buildTinyWithEnum(dependsOn: "mergeTiny", type: FileOutput) {
	group = buildMappingGroup
	def noEnum = mergeTiny.output
	output = new File(tempDir, "named-with-enum.tiny")

	outputs.file(output)
	outputs.upToDateWhen { false }

	doLast {
		logger.lifecycle(":seeking auto-mappable fields")
		String[] argsPropose = [
				mergedFile.getAbsolutePath(), // must use official jar
				noEnum.getAbsolutePath(),
				output.getAbsolutePath()
		]

		new CommandProposeFieldNames().run(argsPropose)
	}
}

task mapNamedJar(dependsOn: ["mergeV2", mapIntermediaryJar]) {
	group = mapJarGroup
	inputs.files downloadMcLibs.outputs.files.files
	outputs.file(namedJar)

	//Force the task to always run
	outputs.upToDateWhen { false }

	doLast {
		logger.lifecycle(":mapping minecraft to named")

		mapJar(namedJar, intermediaryJar, mergeV2.output, libraries, "intermediary", "named")
	}
}

task insertAutoGeneratedEnumMappings(dependsOn : [buildLinenTiny,mapIntermediaryJar], type : FileOutput){
	group = buildMappingGroup
	def noEnumV2 = buildLinenTiny.v2Output
	output = new File(tempDir, "unmerged-named-v2-with-enum.tiny")

	outputs.upToDateWhen { false }

	doLast {
		logger.lifecycle(":seeking auto-mappable fields for unmerged mappings")

		String[] argsProposeV2 = [
				intermediaryJar.getAbsolutePath(), // must use intermediary jar
				noEnumV2.getAbsolutePath(),
				output.getAbsolutePath(),
				"false" // don't replace existing names right now
		]

		new CommandProposeV2FieldNames().run(argsProposeV2)
	}
}

task mergeV2(dependsOn: ["v2UnmergedLinenJar", "invertIntermediaryv2"], type: FileOutput) {
	def mergedV2 = new File(tempDir, "merged-v2.tiny");

	output = new File(tempDir, "merged-reordered-v2.tiny")
	outputs.upToDateWhen { false }

	doLast {
		logger.lifecycle(":merging linen and intermediary v2")
		String[] args = [
				invertIntermediaryv2.output.getAbsolutePath(),
				insertAutoGeneratedEnumMappings.output.getAbsolutePath(),
				mergedV2.getAbsolutePath(),
				"intermediary",
				"official"
		]

		new CommandMergeTinyV2().run(args)

		//Reorder the mappings to match the output of loom
		args = [
				mergedV2.getAbsolutePath(),
				output.getAbsolutePath(),
				"official",
				"intermediary",
				"named"
		]
		new CommandReorderTinyV2().run(args)
	}
}

task v2UnmergedLinenJar(dependsOn: insertAutoGeneratedEnumMappings, type: Jar) {
	def mappings = insertAutoGeneratedEnumMappings.output
	group = "mapping build"
	outputs.upToDateWhen { false }
	archiveFileName = "linen-${linenVersion}-v2.jar"

	from(file(mappings)) {
		rename mappings.name, "mappings/mappings.tiny"
	}
	destinationDirectory.set(file("build/libs"))
}

task v2MergedLinenJar(dependsOn: ["mergeV2"], type: Jar) {
	def mappings = mergeV2.output
	group = "mapping build"
	outputs.upToDateWhen { false }
	archiveFileName = "linen-${linenVersion}-mergedv2.jar"

	from(file(mappings)) {
		rename mappings.name, "mappings/mappings.tiny"
	}
	destinationDirectory.set(file("build/libs"))
}

def fakeSourceDir = file(".gradle/temp/fakeSource")
task genFakeSource(dependsOn: ["buildLinenTiny", "mapNamedJar"]) {
	group = "javadoc generation"
	outputs.upToDateWhen { false }

	doLast {
		String[] args = [
				buildLinenTiny.v2Output.getAbsolutePath(),
				namedJar.getAbsolutePath(),
				fakeSourceDir.getAbsolutePath()
		]

		net.fabricmc.mappingpoet.Main.main(args)

		logger.lifecycle ":Fake source generated"
	}
}

task decompileCFR(type: JavaExec, dependsOn: "mapNamedJar") {
	classpath = configurations.decompileClasspath
	main = "org.benf.cfr.reader.Main"

	args namedJar.getAbsolutePath(), "--outputdir", file("namedSrc").absolutePath

	doFirst {
		file("namedSrc").deleteDir()
	}
}
//
//javadoc {
//	dependsOn genFakeSource
//	dependsOn downloadMcLibs
//	group = "javadoc generation"
//	outputs.upToDateWhen { false }
//	options {
//		source = "8"
//		encoding = 'UTF-8'
//		charSet = 'UTF-8'
//		memberLevel = JavadocMemberLevel.PRIVATE
//		links(
//				'https://guava.dev/releases/21.0/api/docs/',
//				'https://www.javadoc.io/doc/com.google.code.gson/gson/2.8.0/',
//				'https://logging.apache.org/log4j/2.x/log4j-api/apidocs/',
//				// jsr305 need to come before jdk or the anno links are broken
//				'https://www.javadoc.io/doc/com.google.code.findbugs/jsr305/3.0.2/',
//				'https://javadoc.lwjgl.org/',
//				'http://fastutil.di.unimi.it/docs/',
//				'https://commons.apache.org/proper/commons-logging/javadocs/api-1.1.3/',
//				'https://commons.apache.org/proper/commons-lang/javadocs/api-3.5',
//				'https://commons.apache.org/proper/commons-io/javadocs/api-2.5',
//				'https://commons.apache.org/proper/commons-codec/archives/1.10/apidocs',
//				'https://commons.apache.org/proper/commons-compress/javadocs/api-1.8.1/',
//				'https://docs.oracle.com/javase/8/docs/api/'
//				// Need to add loader jd publication for env annotations!
//		)
//		// Disable the crazy super-strict doclint tool in Java 8
//		addStringOption('Xdoclint:none', '-quiet')
//	}
//	source fakeSourceDir
//	classpath = configurations.javadocClasspath.plus downloadMcLibs.outputs.files.asFileTree
//}

task javadocJar(type: Jar, dependsOn: ["javadoc"]) {
	group = "javadoc generation"

	from javadoc.destinationDir

	archiveVersion.set linenVersion
	classifier = 'javadoc'
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId 'io.github.Cursed-Ancient-Fabric'
			artifactId "linen"
			version linenVersion

			artifact(compressTiny.output) {
				classifier "tiny"
				builtBy compressTiny
			}
			artifact(tinyJar)
			artifact(v2UnmergedLinenJar) {
				classifier "v2"
			}
			artifact(v2MergedLinenJar) {
				classifier "mergedv2"
			}
			artifact javadocJar
		}

	}
	repositories {
		maven {
			url "C:/Users/steve/maven"
		}
	}
}


void mapJar(File output, File input, File mappings, File libraries, String from, String to) {
	if (output.exists()) {
		output.delete()
	}

	def remapper = TinyRemapper.newRemapper()
			.withMappings(TinyUtils.createTinyMappingProvider(mappings.toPath(), from, to))
			.renameInvalidLocals(true)
			.rebuildSourceFilenames(true)
			.build()


	try {
		def outputConsumer = new OutputConsumerPath(output.toPath())
		outputConsumer.addNonClassFiles(input.toPath())

		remapper.readInputs(input.toPath())
		libraries.eachFileRecurse(FileType.FILES) { file ->
			remapper.readClassPath(file.toPath())
		}

		remapper.apply(outputConsumer)
		outputConsumer.close()
		remapper.finish()
	} catch (Exception e) {
		remapper.finish()
		throw new RuntimeException("Failed to remap jar" + input, e)
	}
}

class FileOutput extends DefaultTask {
	@OutputFile
	File output
}

class WithV2FileOutput extends DefaultTask {
	@OutputFile
	File v1Output
	@OutputFile
	File v2Output
}
